<?php
/**
 * Created by PhpStorm.
 * User: 江艺勤
 * Date: 2019/5/24
 * Time: 16:05
 */
namespace cncn\insurance\guohua\service;
use cncn\insurance\common\InsuranceException;
use cncn\insurance\guohua\service\GUOHUAInsuranceGateway;
use erp\util\UUIDGenerator;

class Booking extends GUOHUAInsuranceGateway
{

    /**
     * 身份证
     */
    const IDENTITY_CARD = 0;

    /**
     * 护照
     */
    const PASSPORT_CARD = 1;

    /**
     * 军人证
     */
    const OFFICIAL_CARD = 2;

    /**
     * 异常身份证
     */
    const ABNORMAL_IDENTITY_CARD = 3;

    /**
     * 户口本
     */
    const ACCOUNT_BOOK = 4;

    /**
     * 回乡证
     */
    const HUI_XIANG_CARD = 5;

    /**
     * 出生证
     */
    const BIRTH_CARD = 6;




    /**
     * 当前接口方法
     * @return string
     */
    protected function getMethod()
    {
        return 'Booking';
    }
    /**
     * 投保接口地址
     * @return string
     */
    protected function getService()
    {
        return 'transferData_CreateOrder.action?MessageType=INSU';
    }

    /**
     * 单线程单个投保
     * @param array $options
     * @return null
     */
    public function request(array $options)
    {
        return parent::request($options); // TODO: Change the autogenerated stub
    }

    /**
     * 投保参数校验
     * @param array $options
     * @return array
     */
    protected function checkOptions(array $options = [])
    {
        //回调链接
        if(empty($options['RedirectUri'])){
            throw new InsuranceException('投保回调链接为空');
        }
        $data['RedirectUri'] = $options['RedirectUri'];

        //投保详情信息
        if(empty($options['InsuParams'])){
            throw new InsuranceException('投保详情信息为空');
        }

        $data['MessageText'] = $this->checkAndCombineMessageText($options['InsuParams']);

        //投保报文检验
        if(empty($data['MessageText'])){
            throw new InsuranceException('投保报文为空');
        }

        return $data;
    }

    /**
     * @param $params
     * @return string
     * @throws \ReflectionException
     */
    private function checkAndCombineMessageText($params)
    {
//        $uuid = UUIDGenerator::snumberNo('', 5);
        $tradeDateTime = date('Y-m-d H:i:s');

        $tourCity = $params['TourCity'] ?? '';
        $guideNm = $params['GuideNm'] ?? '';
        $clubNm = $params['ClubNm'] ?? '';
        $insuGroupCode = $params['InsuGroupCode'] ?? '';
        $insuMarker = $params['InsuMarker'] ?? '';

        //起止站点
        if(mb_strlen($tourCity) == 0){
            throw new InsuranceException("起止站点不能为空");
        }
        if(mb_strlen($tourCity) > 150){
            throw new InsuranceException("起止站点长度不能超过150个字符");
        }

        //导游名称
        if($guideNm && mb_strlen($guideNm) > 50){
            throw new InsuranceException("导游名不能超过50个字符");
        }

        //旅行社名称
        if($clubNm && mb_strlen($clubNm) > 50){
            throw new InsuranceException("旅行社名称不能超过50个字符");
        }

        //团队号
        if($insuGroupCode && mb_strlen($insuGroupCode) > 100){
            throw new InsuranceException("团队号不能超过100个字符");
        }

        //团队签发人
        if($insuMarker && mb_strlen($insuMarker) > 80){
            throw new InsuranceException("团队签发人名称不能超过80个字符");
        }

        //险种代码
        if(empty($params['InsuProductCode'])){
            throw new InsuranceException("险种代码为空，请选择险种代码！");
        }

        $insuredStr = '';
        if($params['insuredTourists']){
            $insuredStr = $this->checkInsured($params['insuredTourists']);
        }

        //保费验证
        if(bcmul($params['InsuPremium'], $params['TotalNumberOfInsureds'], 2) != $params['TotalPremium']){
            throw new InsuranceException("总保费错误：{$params['InsuPremium']}*{$params['TotalNumberOfInsureds']}!={$params['TotalPremium']}");
        }

        //旅行人数和被保人明细总数对比
        if($params['TotalNumberOfInsureds'] != count($params['insuredTourists'])){
            throw new InsuranceException("被保人总数和明细总数不相等，请检查！");
        }

        if(!$insuredStr){
            throw new InsuranceException("被保人信息为空，请检查被保人信息");
        }

        /**
         * 组装xml报文
         */
        $xml = <<<XML
<TINS_XML_DATA>
    <Header>
        <Version>1.0</Version>
        <MessageId>{$params['TransactionId']}</MessageId>
        <MessageType>TRANS</MessageType>
    </Header>
    <Segment>
        <TransactionType>NEW</TransactionType>
        <TransactionId>{$params['TransactionId']}</TransactionId>
        <PolicyIn>
            <CompanyCode>{$this->config['AgentCode']}</CompanyCode>
            <AgencyBBCode>{$this->config['AgentCode']}</AgencyBBCode>
            <InsuAgencyCode>{$this->config['AgentCode']}</InsuAgencyCode>
            <InsuProductCode>{$params['InsuProductCode']}</InsuProductCode>
            <CntryCd></CntryCd>
            <TransactionApplDate>{$tradeDateTime}</TransactionApplDate>
            <InceptionDate>{$params['InceptionDate']}</InceptionDate>
            <ExpirationDate>{$params['ExpirationDate']}</ExpirationDate>
            <TourCity>{$tourCity}</TourCity>
            <InsuPremium>{$params['InsuPremium']}</InsuPremium>
            <InsuGroupCode>{$insuGroupCode}</InsuGroupCode>
            <InsuMarker>{$insuMarker}</InsuMarker>
            <GuideNm>{$guideNm}</GuideNm>
            <ClubNm>{$clubNm}</ClubNm >
            <TotalNumberOfInsureds>{$params['TotalNumberOfInsureds']}</TotalNumberOfInsureds>
            <TotalPremium>{$params['TotalPremium']}</TotalPremium>
        </PolicyIn>
        {$insuredStr}
    </Segment>
</TINS_XML_DATA>
XML;

        return $xml;
    }


    /**
     * 被保人信息校验
     * @param $insuredTourists
     * @return string
     * @throws \ReflectionException
     */
    private function checkInsured($insuredTourists)
    {
        $insuredStr = '';
        //传入信息为空校验
        if(!$insuredTourists){
            throw new InsuranceException("被保人信息为空");
        }
        foreach($insuredTourists as $key => $insured){
            $insured = array_map('trim', $insured);
            $index = $key + 1;
            //被保人姓名校验
            if(mb_strlen($insured['LastNm']) == 0){
                throw new InsuranceException("第{$index}个被保人姓名为空");
            }
            if(mb_strlen($insured['LastNm']) > 20){
                throw new InsuranceException("第{$index}个被保人姓名不能超过20个字符");
            }

            //被保人证件号校验
            if(strlen($insured['InsuredIdNo']) == 0){
                throw new InsuranceException("第{$index}个被保人证件号为空");
            }
            if(strlen($insured['InsuredIdNo']) > 18){
                throw new InsuranceException("第{$index}个被保人证件号不能超过18个字符");
            }

            //证件类型
            if(!in_array($insured['IdType'], $this->getAllowCardIdsArr())){
                throw new InsuranceException("第{$index}个被保人证件类型不合法");
            }

            //生日日期校验
            if($this->checkDate($insured['BirthDt'])){
                throw new InsuranceException("第{$index}个被保人出生日期不合法");
            }

            //性别参数
            if(!in_array($insured['PerSex'], [0, 1])){
                throw new InsuranceException("第{$index}个被保人性别参数不合法");
            }

            if(mb_strlen($insured['InsuredNm']) > 25){
                throw new InsuranceException("第{$index}个被保人的投保人姓名不能超过25个字符");
            }

            $insuredStr .= <<<INSURED_XML
<Insured>
    <LastNm>{$insured['LastNm']}</LastNm>
    <InsuredIdNo>{$insured['InsuredIdNo']}</InsuredIdNo>
    <SeqNm>{$insured['SeqNm']}</SeqNm>
    <BenefitIn>0</BenefitIn>
    <IdType>{$insured['IdType']}</IdType>
    <BirthDt>{$insured['BirthDt']}</BirthDt>
    <PerSex>{$insured['PerSex']}</PerSex>
    <InsuredNm>{$insured['InsuredNm']}</InsuredNm>
</Insured>
INSURED_XML;
        }

        return $insuredStr;
    }

    /**
     * 获取投保接口限定的证件类型
     * @return array
     * @throws \ReflectionException
     */
    private function getAllowCardIdsArr()
    {
        $objClass = new \ReflectionClass(__CLASS__);
        return array_values($objClass->getConstants());
    }
}